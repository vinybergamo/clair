#!/usr/bin/env bash
set -eo pipefail
shopt -s nullglob

export DOCKER_BIN=docker
if [[ -r /etc/default/clair ]]; then
  # shellcheck disable=SC1091
  source /etc/default/clair
fi

export clair_ROOT=${clair_ROOT:=~clair}
if [[ -f "$clair_ROOT/clairrc" ]]; then
  if [[ -r $clair_ROOT/clairrc ]]; then
    source "$clair_ROOT/clairrc"
  else
    echo "Unable to read $clair_ROOT/clairrc for sourcing" 1>&2
    exit 1
  fi
fi
if [[ -d $clair_ROOT/.clairrc ]]; then
  for f in $clair_ROOT/.clairrc/*; do
    if [[ -r "$f" ]]; then
      source "$f"
    else
      echo "Unable to read $f for sourcing" 1>&2
      exit 1
    fi
  done
fi
[[ $clair_TRACE ]] && set -x
export clair_HOST_ROOT=${clair_HOST_ROOT:=$clair_ROOT}

export clair_DISTRO
# shellcheck disable=SC1091
clair_DISTRO=$(
  . /etc/os-release >/dev/null 2>&1 || true
  echo "$ID"
)

# Specify twice so that only host-level
# configuration can ever override the DOCKER_BIN value
export DOCKER_BIN=${DOCKER_BIN:="docker"}

export clair_IMAGE=${clair_IMAGE:="gliderlabs/herokuish:latest-20"}
export clair_CNB_BUILDER=${clair_CNB_BUILDER:="heroku/buildpacks:20"}
export clair_LIB_ROOT=${clair_LIB_PATH:="/var/lib/clair"}

export PLUGIN_PATH=${PLUGIN_PATH:="$clair_LIB_ROOT/plugins"}
export PLUGIN_AVAILABLE_PATH=${PLUGIN_AVAILABLE_PATH:="$PLUGIN_PATH/available"}
export PLUGIN_ENABLED_PATH=${PLUGIN_ENABLED_PATH:="$PLUGIN_PATH/enabled"}
export PLUGIN_CORE_PATH=${PLUGIN_CORE_PATH:="$clair_LIB_ROOT/core-plugins"}
export PLUGIN_CORE_AVAILABLE_PATH=${PLUGIN_CORE_AVAILABLE_PATH:="$PLUGIN_CORE_PATH/available"}
export PLUGIN_CORE_ENABLED_PATH=${PLUGIN_CORE_ENABLED_PATH:="$PLUGIN_CORE_PATH/enabled"}
export clair_SYSTEM_GROUP=${clair_SYSTEM_GROUP:="clair"}
export clair_SYSTEM_USER=${clair_SYSTEM_USER:="clair"}

export clair_API_VERSION=1
export clair_NOT_IMPLEMENTED_EXIT=10
export clair_VALID_EXIT=0
export clair_PID="$BASHPID"

export clair_LOGS_DIR=${clair_LOGS_DIR:="/var/log/clair"}
export clair_LOGS_HOST_DIR=${clair_LOGS_HOST_DIR:=$clair_LOGS_DIR}
export clair_EVENTS_LOGFILE=${clair_EVENTS_LOGFILE:="$clair_LOGS_DIR/events.log"}

export clair_CONTAINER_LABEL=clair
export clair_GLOBAL_BUILD_ARGS="--label=org.label-schema.schema-version=1.0 --label=org.label-schema.vendor=clair --label=$clair_CONTAINER_LABEL"
export clair_GLOBAL_RUN_ARGS="--label=org.label-schema.schema-version=1.0 --label=org.label-schema.vendor=clair --label=$clair_CONTAINER_LABEL"

source "$PLUGIN_CORE_AVAILABLE_PATH/common/functions"

parse_args "$@"
args=("$@")
skip_arg=false
if [[ "${args[0]}" =~ ^--.* ]]; then
  for arg in "$@"; do
    $skip_arg && skip_arg=false && continue
    if [[ "$arg" == "--version" ]]; then
      continue
    fi
    if [[ "$arg" == "--app" ]]; then
      shift 2 && skip_arg=true
    elif [[ "$arg" =~ ^--.* ]]; then
      shift 1
    else
      break
    fi
  done
fi
! has_tty && clair_QUIET_OUTPUT=1

if [[ $(id -un) != "clair" ]]; then
  unset TMP TMPDIR TEMP TEMPDIR
  if [[ ! $1 =~ plugin:* ]] && [[ $1 != "ssh-keys:add" ]] && [[ $1 != "ssh-keys:remove" ]]; then
    export SSH_USER=$(id -un)
    sudo -u clair -E -H "$0" "$@"
    exit $?
  fi
fi

if [[ $1 =~ ^plugin:.* && $1 != "plugin:help" && $1 != "plugin:list" ]] || [[ $1 == "ssh-keys:add" ]] || [[ $1 == "ssh-keys:remove" ]]; then
  if [[ $(id -un) != "root" ]]; then
    clair_log_fail "This command must be run as root"
  else
    export SSH_USER=root
  fi
fi

if [[ -n "$SSH_ORIGINAL_COMMAND" ]]; then
  export -n SSH_ORIGINAL_COMMAND
  if [[ $1 =~ config-* ]] || [[ $1 =~ docker-options* ]]; then
    # shellcheck disable=SC2086
    xargs $0 <<<$SSH_ORIGINAL_COMMAND
    exit $?
  else
    set -f
    # shellcheck disable=SC2086
    $0 $SSH_ORIGINAL_COMMAND
    set +f
    exit $?
  fi
fi

if ! clair_auth "$@"; then
  clair_log_fail "Access denied"
  exit 1
fi

execute_clair_cmd() {
  declare desc="executes clair sub-commands"
  local PLUGIN_NAME="$1"
  local PLUGIN_CMD=$PLUGIN_NAME
  local implemented=0
  local script
  local argv=("$@")

  case "$PLUGIN_NAME" in
    events | events:*)
      local PLUGIN_NAME=${PLUGIN_NAME/events/20_events}
      ;;
    caddy | caddy:*)
      local PLUGIN_NAME=${PLUGIN_NAME/caddy/caddy-vhosts}
      ;;
    haproxy | haproxy:*)
      local PLUGIN_NAME=${PLUGIN_NAME/haproxy/haproxy-vhosts}
      ;;
    nginx | nginx:*)
      local PLUGIN_NAME=${PLUGIN_NAME/nginx/nginx-vhosts}
      ;;
    traefik | traefik:*)
      local PLUGIN_NAME=${PLUGIN_NAME/traefik/traefik-vhosts}
      ;;
    deploy | cleanup | url | urls | report)
      local PLUGIN_NAME="00_clair-standard"
      ;;
  esac

  if [[ "$(readlink -f "$PLUGIN_ENABLED_PATH/${PLUGIN_NAME%%:*}")" == *core-plugins* ]]; then
    [[ ${argv[0]} == "$PLUGIN_CMD" ]] && shift 1
    if [[ -n $clair_APP_NAME ]]; then
      set -- "$clair_APP_NAME" "$@"
    fi
    set -- "$PLUGIN_CMD" "$@"
  fi

  if [[ -x $PLUGIN_ENABLED_PATH/$PLUGIN_NAME/subcommands/default ]]; then
    "$PLUGIN_ENABLED_PATH/$PLUGIN_NAME/subcommands/default" "$@"
    implemented=1
  elif [[ -x $PLUGIN_ENABLED_PATH/$PLUGIN_NAME/subcommands/$PLUGIN_CMD ]]; then
    "$PLUGIN_ENABLED_PATH/$PLUGIN_NAME/subcommands/$PLUGIN_CMD" "$@"
    implemented=1
  elif [[ -x $PLUGIN_ENABLED_PATH/${PLUGIN_NAME%%:*}/subcommands/${1#*:} ]] && [[ -n "${1#*:}" ]]; then
    "$PLUGIN_ENABLED_PATH/${PLUGIN_NAME%%:*}/subcommands/${1#*:}" "$@"
    implemented=1
  fi

  if [[ $implemented -eq 0 ]]; then
    for script in $PLUGIN_ENABLED_PATH/*/commands; do
      set +e
      $script "$@"
      exit_code=$?
      set -e
      if [[ "$exit_code" -eq "$clair_NOT_IMPLEMENTED_EXIT" ]]; then
        continue
      fi
      implemented=1
      if [[ "$exit_code" -ne "$clair_VALID_EXIT" ]]; then
        exit $exit_code
      fi
    done
  fi

  if [[ "$implemented" -eq 0 ]]; then
    clair_log_warn "\`$*\` is not a clair command."
    clair_log_warn "See \`clair help\` for a list of available commands."
    exit 1
  fi
}

case "$1" in
  help | '')
    export LC_ALL=C # so sort will respect non alpha characters
    ALL_PLUGIN_COMMANDS=$(find -L "$PLUGIN_PATH/enabled" -name commands 2>/dev/null || true)

    # build list of core plugin command files
    for plugin_command in $ALL_PLUGIN_COMMANDS; do
      if [[ "$(readlink -f "$plugin_command")" == *core-plugins* ]]; then
        CORE_PLUGIN_COMMANDS+="$plugin_command "
      fi
    done
    # build list of non-core plugin command files
    for plugin_command in $ALL_PLUGIN_COMMANDS; do
      if [[ "$(readlink -f "$plugin_command")" != *core-plugins* ]]; then
        COMMUNITY_PLUGIN_COMMANDS+="$plugin_command "
      fi
    done

    # New lines are blank echos for readability
    clair_log_quiet "Usage: clair [--quiet|--trace|--force] COMMAND <app> [command-specific-options]"
    clair_log_quiet ""
    clair_log_quiet "Primary help options, type \"clair COMMAND:help\" for more details, or clair help --all to see all commands."
    clair_log_quiet ""
    clair_log_quiet "Commands:"
    clair_log_quiet ""

    if [[ "$2" == "--all" ]]; then
      for core_plugin_command in $CORE_PLUGIN_COMMANDS; do
        $core_plugin_command help
      done | sort | column -c2 -t -s,
      clair_log_quiet ""
      clair_log_quiet "Community plugin commands:"
      clair_log_quiet ""
      for community_plugin_command in $COMMUNITY_PLUGIN_COMMANDS; do
        $community_plugin_command help
      done | sort | column -c2 -t -s,
    else
      for core_plugin_command in $CORE_PLUGIN_COMMANDS; do
        $core_plugin_command help
        # When done, sort, sed cuts arguments out of strings and colum make it pretty
      done | sort | sed -e '/^.*:/d' -e 's/\s[\[\<\-\(].*,/,/' | column -c2 -t -s,
      if [[ -n "$COMMUNITY_PLUGIN_COMMANDS" ]]; then
        clair_log_quiet ""
        clair_log_quiet "Community plugin commands:"
        clair_log_quiet ""
        for community_plugin_command in $COMMUNITY_PLUGIN_COMMANDS; do
          $community_plugin_command help
        done | sort | column -c2 -t -s,
      fi
    fi
    ;;

  version | -v | --version)
    clair_version
    ;;

  *)
    execute_clair_cmd "$@"
    ;;

esac
